#![allow(unused_variables)] // TODO: remove this

use crate::error::*;
use sntk_bytecode::interpreter::*;
use sntk_core::parser::ast::*;

/// Compile the AST generated by `sntk_core` parser into bytecode.
#[derive(Debug)]
pub struct Compiler {
    pub program: Program,
    pub interpreter: Interpreter,
}

pub type CompileResult<T> = Result<T, CompileError>;

/// Provides the basic methods of the compiler.
pub trait CompilerTrait {
    fn compile(&self) -> CompileResult<Interpreter>;
    fn compile_expression(&self, expression: &Expression) -> CompileResult<CompileError>;
}

impl CompilerTrait for Compiler {
    /// Compile the AST generated by `sntk_core` parser into bytecode.
    fn compile(&self) -> CompileResult<Interpreter> {
        if self.program.errors.len() > 0 {
            return Err(CompileError::ParseError(self.program.errors.clone()));
        }

        for statement in &self.program.statements {
            match statement {
                Statement::LetStatement(statement) => todo!(),
                Statement::ReturnStatement(statement) => todo!(),
                Statement::TypeStatement(statement) => todo!(),
                Statement::ExpressionStatement(ExpressionStatement { expression, position }) => {
                    self.compile_expression(expression)?;
                }
            }
        }

        Ok(self.interpreter.clone())
    }

    fn compile_expression(&self, expression: &Expression) -> CompileResult<CompileError> {
        todo!()
    }
}
